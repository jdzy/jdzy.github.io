<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS中flex布局详解</title>
    <url>/2021/10/28/CSS%E4%B8%ADflex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="一、Flex布局是啥？"><a href="#一、Flex布局是啥？" class="headerlink" title="一、Flex布局是啥？"></a>一、Flex布局是啥？</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行内元素也可以使用Flex布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Webkit内核的浏览器，必须加上-webkit前缀</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p>
<p><img src="/postimg/2/1.png" alt="flex"></p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>
<h2 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h2><p>以下6个属性设置在容器上。</p>
<blockquote>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
</blockquote>
<h3 id="3-1-flex-direction属性"><a href="#3-1-flex-direction属性" class="headerlink" title="3.1 flex-direction属性"></a>3.1 flex-direction属性</h3><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/postimg/2/2.png" alt="flex"></p>
<p>它可能有4个值。</p>
<p>row（默认值）：主轴为水平方向，起点在左端。<br>row-reverse：主轴为水平方向，起点在右端。<br>column：主轴为垂直方向，起点在上沿。<br>column-reverse：主轴为垂直方向，起点在下沿。<br>3.2 flex-wrap属性</p>
<p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p>
<p><img src="/postimg/2/3.png" alt="img"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可能取三个值。</p>
<p>（1）nowrap（默认）：不换行。</p>
<p><img src="/postimg/2/4.png" alt="img"></p>
<p>（2）wrap：换行，第一行在上方。</p>
<p><img src="/postimg/2/5.jpg" alt="img"></p>
<p>（3）wrap-reverse：换行，第一行在下方。</p>
<p><img src="/postimg/2/6.jpg" alt="img"></p>
<h3 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-justify-content属性"><a href="#3-4-justify-content属性" class="headerlink" title="3.4 justify-content属性"></a>3.4 justify-content属性</h3><p>justify-content属性定义了项目在主轴上的对齐方式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/postimg/2/7.png" alt="img"></p>
<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<blockquote>
<ul>
<li>flex-start（默认值）：左对齐</li>
<li>flex-end：右对齐</li>
<li>center： 居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等。</li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
</blockquote>
<h3 id="3-5-align-items属性"><a href="#3-5-align-items属性" class="headerlink" title="3.5 align-items属性"></a>3.5 align-items属性</h3><p>align-items属性定义项目在交叉轴上如何对齐。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/postimg/2/8.png" alt="img"></p>
<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<blockquote>
<ul>
<li>flex-start：交叉轴的起点对齐。</li>
<li>flex-end：交叉轴的终点对齐。</li>
<li>center：交叉轴的中点对齐。</li>
<li>baseline: 项目的第一行文字的基线对齐。</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
</blockquote>
<h3 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/postimg/2/9.png" alt="img"></p>
<p>该属性可能取6个值。</p>
<blockquote>
<ul>
<li>flex-start：与交叉轴的起点对齐。</li>
<li>flex-end：与交叉轴的终点对齐。</li>
<li>center：与交叉轴的中点对齐。</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>stretch（默认值）：轴线占满整个交叉轴。</li>
</ul>
</blockquote>
<h3 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h3><p>以下6个属性设置在项目上。</p>
<blockquote>
<ul>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
</blockquote>
<h3 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h3><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/postimg/2/10.png" alt="img"></p>
<h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/postimg/2/11.png" alt="img"></p>
<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h3 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h3><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/postimg/2/12.jpg" alt="img"></p>
<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
<h3 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h3><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>
<h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/postimg/2/13.png" alt="img"></p>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Github免费搭建个人博客</title>
    <url>/2021/10/15/Hexo-Github%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>使用Github page服务搭建博客的好处有：</p>
<ul>
<li><p>全是静态文件访问速度快</p>
</li>
<li><p>免费，不用花一分钱</p>
</li>
<li><p>Github免费提供二级域名</p>
</li>
<li><p>可轻松打包转发到第三平台，本站采用Vercel关联Github仓库进行托管，国内访问速度也很快</p>
</li>
</ul>
<h2 id="1-1-开发环境"><a href="#1-1-开发环境" class="headerlink" title="1.1.开发环境"></a>1.1.开发环境</h2><ul>
<li>Windows 10</li>
<li><a href="mailto:&#x4e;&#x6f;&#100;&#101;&#x2e;&#x6a;&#x73;&#64;&#x31;&#50;&#x2e;&#49;&#x34;&#46;&#48;">&#x4e;&#x6f;&#100;&#101;&#x2e;&#x6a;&#x73;&#64;&#x31;&#50;&#x2e;&#49;&#x34;&#46;&#48;</a></li>
<li><a href="mailto:&#x47;&#105;&#x74;&#x40;&#50;&#x2e;&#x33;&#50;&#46;&#48;">&#x47;&#105;&#x74;&#x40;&#50;&#x2e;&#x33;&#50;&#46;&#48;</a></li>
<li><a href="mailto:&#72;&#101;&#120;&#x6f;&#x2d;&#x63;&#108;&#105;&#64;&#52;&#x2e;&#x33;&#46;&#x30;">&#72;&#101;&#120;&#x6f;&#x2d;&#x63;&#108;&#105;&#64;&#52;&#x2e;&#x33;&#46;&#x30;</a></li>
<li><a href="mailto:&#x4e;&#101;&#x78;&#116;&#x40;&#53;&#46;&#x31;&#46;&#52;">&#x4e;&#101;&#x78;&#116;&#x40;&#53;&#46;&#x31;&#46;&#52;</a></li>
</ul>
<h1 id="2-搭建Github博客"><a href="#2-搭建Github博客" class="headerlink" title="2.搭建Github博客"></a>2.搭建Github博客</h1><h2 id="2-1-安装Node-js"><a href="#2-1-安装Node-js" class="headerlink" title="2.1.安装Node.js"></a>2.1.安装Node.js</h2><p>官网<a href="https://nodejs.org/zh-cn/download/releases/">点击下载</a></p>
<p>找到<strong>Node.js 12.14.0</strong>，点击这里我们是64位电脑点击<strong>node-v12.14.0-x64.msi</strong>下载即可，点击进行安装，安装过程如图所示：</p>
<p><img src="/postimg/1/1.png" alt="1"></p>
<p><img src="/postimg/1/2.png" alt="1"></p>
<p><img src="/postimg/1/3.png" alt="1"></p>
<p><img src="/postimg/1/4.png" alt="1"></p>
<p><img src="/postimg/1/5.png" alt="1"></p>
<p><img src="/postimg/1/6.png" alt="1"></p>
<p>安装程序会自动配置环境变量以及npm，打开cmd分别输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v12.14.0</span><br><span class="line">$ npm -v</span><br><span class="line">6.13.4</span><br></pre></td></tr></table></figure>

<p>若如图所示，恭喜你，Node.js安装成功！</p>
<h2 id="2-2-安装Git"><a href="#2-2-安装Git" class="headerlink" title="2.2.安装Git"></a>2.2.安装Git</h2><p>官网<a href="https://git-scm.com/download/">点击下载</a></p>
<p>找到相应版本下载到电脑再安装，这里不细说<a href="https://blog.csdn.net/qq_32786873/article/details/80570783">教程</a></p>
<p>打开cmd输入git –version，显示对应版本则安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\suche&gt;git --version</span><br><span class="line">git version 2.32.0.windows.2</span><br></pre></td></tr></table></figure>

<h2 id="2-3-建立Hexo站点"><a href="#2-3-建立Hexo站点" class="headerlink" title="2.3.建立Hexo站点"></a>2.3.建立Hexo站点</h2><h3 id="2-3-1-安装Hexo"><a href="#2-3-1-安装Hexo" class="headerlink" title="2.3.1.安装Hexo"></a>2.3.1.安装Hexo</h3><p>桌面右键Git Bash Here进入Git Bash,输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-建站"><a href="#2-3-2-建站" class="headerlink" title="2.3.2.建站"></a>2.3.2.建站</h3><p>安装Hexo 完成后，我们可以进行建立站点了，这里我在桌面打开Bash执行以下命令进行初始化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init errof.com</span><br></pre></td></tr></table></figure>

<p>然后进入生成的文件夹，初始化时errof.com可替换成任意名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> errof.com</span><br></pre></td></tr></table></figure>

<p>再安装依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>再生成网页静态文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<p>这时候网站已经完成了，我们可以输入以下命令启动本地服务器进行测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>这时候打开浏览器输入<strong>localhost:4000</strong>，出现以下界面则Hexo站点成功运行</p>
<p><img src="/postimg/1/8.png" alt="success"></p>
<h2 id="2-4-部署到Github"><a href="#2-4-部署到Github" class="headerlink" title="2.4.部署到Github"></a>2.4.部署到Github</h2><h3 id="2-4-1-注册-登录Github账号"><a href="#2-4-1-注册-登录Github账号" class="headerlink" title="2.4.1.注册/登录Github账号"></a>2.4.1.注册/登录Github账号</h3><p><a href="https://github.com/">注册、登录</a>Github，有账号右上角Sign in即可，没有Sign up一个即可，想必大家这都不是问题不必细说</p>
<p>注：Github访问慢进不去这里推荐Gitee开源的很好用的工具<a href="https://gitee.com/docmirror/dev-sidecar/releases">直通车</a></p>
<h3 id="2-4-2-配置SSH-key"><a href="#2-4-2-配置SSH-key" class="headerlink" title="2.4.2.配置SSH key"></a>2.4.2.配置SSH key</h3><p>先进入ssh文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure>

<p>再输入命令生成密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱地址&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后一直回车即可，最后会在用户目录下生成密钥，windows文件夹在<strong>C:\Users\suche</strong>下的**.ssh<strong>目录下，用记事本打开</strong>id_rsa.pub**，全选复制，然后打开Github主页，点头像进入Settings -&gt; SSH and GPGkeys -&gt; New SSH key ， title随便填即可，把刚才复制的粘贴在Key下，最后点Add SSH Key，大功告成</p>
<p>下面进入Bash输入命令来测试是否配置成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi jdzy! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果提示Are you sure you want to continue connecting (yes/no)?</p>
<p>输入yes回车即可</p>
</blockquote>
<p>最后出现上面内容，那SSH已成功配置！</p>
<p>最后再配置即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;你的github用户名&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;你的github邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-建立Github-Page"><a href="#2-4-3-建立Github-Page" class="headerlink" title="2.4.3.建立Github Page"></a>2.4.3.建立Github Page</h3><p>个人主页点击<strong>New repository</strong>，创立仓库</p>
<p><img src="/postimg/1/9.png" alt="repo"></p>
<p>Repository name输入[你的用户名].<strong>github.io</strong>即可,Description是仓库描述随意填写就行，其他默认，点击Create repository创建仓库，然后就可以部署了</p>
<h3 id="2-4-4-一键部署"><a href="#2-4-4-一键部署" class="headerlink" title="2.4.4.一键部署"></a>2.4.4.一键部署</h3><p>先安装<strong>hexo-deployer-git</strong>，打开Bash输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>修改<strong>站点配置文件</strong>，我这里是/errof.com/_config.yml，在最后找到deploy选项，修改成：</p>
<blockquote>
<p>deploy:<br>  type: git<br>  repo:<br>         github: <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:jdzy/jdzy.github.io.git</p>
</blockquote>
<p><strong>jdzy/jdzy.github.io.git</strong>的<strong>jdzy</strong>改成自己的用户名即可</p>
<p>最后进入<strong>errof.com文件夹</strong>[你的站点目录下]，打开Git Bash，依次输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean      <span class="comment">#清除缓存，每次部署建议运行一次</span></span><br><span class="line">$ hexo g          <span class="comment">#生成静态网页文件</span></span><br><span class="line">$ hexo d          <span class="comment">#部署网站</span></span><br></pre></td></tr></table></figure>



<h1 id="3-最后"><a href="#3-最后" class="headerlink" title="3.最后"></a>3.最后</h1><p>此时你的<strong>Hexo博客</strong>已经部署到<strong>Github</strong>上了，Github已经提供域名，浏览器搜索[用户名].github.io就可以进入网站啦，博客使用、安装<strong>Next主题</strong>以及<strong>Next主题</strong>的优化配置有兴趣的可以留言解决</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World !\n \</span></span><br><span class="line"><span class="string">       绝对战有(jdzy) \n&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
